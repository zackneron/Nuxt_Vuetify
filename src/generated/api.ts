//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosStatic } from 'axios';

import { useMutation, UseMutationOptions, useQuery, useQueryClient } from '@tanstack/vue-query'
import { createQueryKeys } from '@lukemorales/query-key-factory'

let axiosToUse = axios

export function setAxiosForApis(axios: AxiosStatic) {
    axiosToUse = axios
}

export const ClaimsDetailsApi = {

    validateSchemeExitDate: async(memberNumber: string, schemeName: string, schemeCode: string, fundOptionName: string, exitDate: Date, abortSignal?: AbortSignal | undefined) : Promise<GetSchemeDatesForMemberQueryResponse> => {
        let url_ = "/api/claimsDetails/validateSchemeExitDate?";
        if (memberNumber === undefined || memberNumber === null)
            throw new Error("The parameter 'memberNumber' must be defined and cannot be null.");
        else
            url_ += "memberNumber=" + encodeURIComponent("" + memberNumber) + "&";
        if (schemeName === undefined || schemeName === null)
            throw new Error("The parameter 'schemeName' must be defined and cannot be null.");
        else
            url_ += "schemeName=" + encodeURIComponent("" + schemeName) + "&";
        if (schemeCode === undefined || schemeCode === null)
            throw new Error("The parameter 'schemeCode' must be defined and cannot be null.");
        else
            url_ += "schemeCode=" + encodeURIComponent("" + schemeCode) + "&";
        if (fundOptionName === undefined || fundOptionName === null)
            throw new Error("The parameter 'fundOptionName' must be defined and cannot be null.");
        else
            url_ += "fundOptionName=" + encodeURIComponent("" + fundOptionName) + "&";
        if (exitDate === undefined || exitDate === null)
            throw new Error("The parameter 'exitDate' must be defined and cannot be null.");
        else
            url_ += "exitDate=" + encodeURIComponent(exitDate ? "" + exitDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as GetSchemeDatesForMemberQueryResponse;
    },

}

export const ClaimsDetailsApiQueryKeys = createQueryKeys('ClaimsDetailsApi', {
    ValidateSchemeExitDate: (memberNumber: string, schemeName: string, schemeCode: string, fundOptionName: string, exitDate: Date) => [{ memberNumber, schemeName, schemeCode, fundOptionName, exitDate }],
})

export const ClaimsDetailsApiQueries = {

    useValidateSchemeExitDate: (memberNumber: string, schemeName: string, schemeCode: string, fundOptionName: string, exitDate: Date) => {
        const queryKey = ClaimsDetailsApiQueryKeys.ValidateSchemeExitDate(memberNumber, schemeName, schemeCode, fundOptionName, exitDate).queryKey
        return useQuery(queryKey, () => ClaimsDetailsApi.validateSchemeExitDate(memberNumber, schemeName, schemeCode, fundOptionName, exitDate))
    },

}

export const ContactDetailsApi = {

    getContactDetails: async(membershipNumber: string, abortSignal?: AbortSignal | undefined) : Promise<MemberMemberDetail> => {
        let url_ = "/api/contact/getContactDetails?";
        if (membershipNumber === undefined || membershipNumber === null)
            throw new Error("The parameter 'membershipNumber' must be defined and cannot be null.");
        else
            url_ += "membershipNumber=" + encodeURIComponent("" + membershipNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as MemberMemberDetail;
    },

    validateIdNumber: async(idNumber: string, abortSignal?: AbortSignal | undefined) : Promise<string> => {
        let url_ = "/api/contact/validateIdNumber?";
        if (idNumber === undefined || idNumber === null)
            throw new Error("The parameter 'idNumber' must be defined and cannot be null.");
        else
            url_ += "idNumber=" + encodeURIComponent("" + idNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as string;
    },

}

export const ContactDetailsApiQueryKeys = createQueryKeys('ContactDetailsApi', {
    GetContactDetails: (membershipNumber: string) => [{ membershipNumber }],
    ValidateIdNumber: (idNumber: string) => [{ idNumber }],
})

export const ContactDetailsApiQueries = {

    useGetContactDetails: (membershipNumber: string) => {
        const queryKey = ContactDetailsApiQueryKeys.GetContactDetails(membershipNumber).queryKey
        return useQuery(queryKey, () => ContactDetailsApi.getContactDetails(membershipNumber))
    },

    useValidateIdNumber: (idNumber: string) => {
        const queryKey = ContactDetailsApiQueryKeys.ValidateIdNumber(idNumber).queryKey
        return useQuery(queryKey, () => ContactDetailsApi.validateIdNumber(idNumber))
    },

}

export const EmployerSchemeApi = {

    get: async( abortSignal?: AbortSignal | undefined) : Promise<DtoSourceDataModel[]> => {
        let url_ = "/api/scheme";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as DtoSourceDataModel[];
    },

    getBySchemeCode: async(code: string, abortSignal?: AbortSignal | undefined) : Promise<RetirementSchemeRetirementSchemeEntity> => {
        let url_ = "/api/scheme/getBySchemeCode?";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined and cannot be null.");
        else
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as RetirementSchemeRetirementSchemeEntity;
    },

    getMemberHybridFundNames: async(memberNumber: string, abortSignal?: AbortSignal | undefined) : Promise<RetirementSchemeRetirementSchemeEntity> => {
        let url_ = "/api/scheme/getMemberHybridFundNames?";
        if (memberNumber === undefined || memberNumber === null)
            throw new Error("The parameter 'memberNumber' must be defined and cannot be null.");
        else
            url_ += "memberNumber=" + encodeURIComponent("" + memberNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as RetirementSchemeRetirementSchemeEntity;
    },

    getIsMemberInHybridFund: async(memberNumber: string, abortSignal?: AbortSignal | undefined) : Promise<RetirementSchemeRetirementSchemeEntity> => {
        let url_ = "/api/scheme/getIsMemberInHybridFund?";
        if (memberNumber === undefined || memberNumber === null)
            throw new Error("The parameter 'memberNumber' must be defined and cannot be null.");
        else
            url_ += "memberNumber=" + encodeURIComponent("" + memberNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as RetirementSchemeRetirementSchemeEntity;
    },

    getBranches: async(employerBranchKey: number, abortSignal?: AbortSignal | undefined) : Promise<RetirementSchemeEmployerBranchKeyEntity> => {
        let url_ = "/api/scheme/getBranches?";
        if (employerBranchKey === undefined || employerBranchKey === null)
            throw new Error("The parameter 'employerBranchKey' must be defined and cannot be null.");
        else
            url_ += "employerBranchKey=" + encodeURIComponent("" + employerBranchKey) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as RetirementSchemeEmployerBranchKeyEntity;
    },

}

export const EmployerSchemeApiQueryKeys = createQueryKeys('EmployerSchemeApi', {
    Get: () => [{  }],
    GetBySchemeCode: (code: string) => [{ code }],
    GetMemberHybridFundNames: (memberNumber: string) => [{ memberNumber }],
    GetIsMemberInHybridFund: (memberNumber: string) => [{ memberNumber }],
    GetBranches: (employerBranchKey: number) => [{ employerBranchKey }],
})

export const EmployerSchemeApiQueries = {

    useGet: () => {
        const queryKey = EmployerSchemeApiQueryKeys.Get().queryKey
        return useQuery(queryKey, () => EmployerSchemeApi.get())
    },

    useGetBySchemeCode: (code: string) => {
        const queryKey = EmployerSchemeApiQueryKeys.GetBySchemeCode(code).queryKey
        return useQuery(queryKey, () => EmployerSchemeApi.getBySchemeCode(code))
    },

    useGetMemberHybridFundNames: (memberNumber: string) => {
        const queryKey = EmployerSchemeApiQueryKeys.GetMemberHybridFundNames(memberNumber).queryKey
        return useQuery(queryKey, () => EmployerSchemeApi.getMemberHybridFundNames(memberNumber))
    },

    useGetIsMemberInHybridFund: (memberNumber: string) => {
        const queryKey = EmployerSchemeApiQueryKeys.GetIsMemberInHybridFund(memberNumber).queryKey
        return useQuery(queryKey, () => EmployerSchemeApi.getIsMemberInHybridFund(memberNumber))
    },

    useGetBranches: (employerBranchKey: number) => {
        const queryKey = EmployerSchemeApiQueryKeys.GetBranches(employerBranchKey).queryKey
        return useQuery(queryKey, () => EmployerSchemeApi.getBranches(employerBranchKey))
    },

}

export const MemberApi = {

    get: async(schemeName: string, fundOptionName: string, abortSignal?: AbortSignal | undefined) : Promise<DtoMemberDetails[]> => {
        let url_ = "/api/member?";
        if (schemeName === undefined || schemeName === null)
            throw new Error("The parameter 'schemeName' must be defined and cannot be null.");
        else
            url_ += "schemeName=" + encodeURIComponent("" + schemeName) + "&";
        if (fundOptionName === undefined || fundOptionName === null)
            throw new Error("The parameter 'fundOptionName' must be defined and cannot be null.");
        else
            url_ += "fundOptionName=" + encodeURIComponent("" + fundOptionName) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as DtoMemberDetails[];
    },

}

export const MemberApiQueryKeys = createQueryKeys('MemberApi', {
    Get: (schemeName: string, fundOptionName: string) => [{ schemeName, fundOptionName }],
})

export const MemberApiQueries = {

    useGet: (schemeName: string, fundOptionName: string) => {
        const queryKey = MemberApiQueryKeys.Get(schemeName, fundOptionName).queryKey
        return useQuery(queryKey, () => MemberApi.get(schemeName, fundOptionName))
    },

}

export const SignOutApi = {

    get: async( abortSignal?: AbortSignal | undefined) : Promise<string> => {
        let url_ = "/signout";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as string;
    },

}

export const SignOutApiQueryKeys = createQueryKeys('SignOutApi', {
    Get: () => [{  }],
})

export const SignOutApiQueries = {

    useGet: () => {
        const queryKey = SignOutApiQueryKeys.Get().queryKey
        return useQuery(queryKey, () => SignOutApi.get())
    },

}

export const UserApi = {

    get: async( abortSignal?: AbortSignal | undefined) : Promise<UsersIUserAccessor> => {
        let url_ = "/api/user";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as UsersIUserAccessor;
    },

    applicationTokens: async( abortSignal?: AbortSignal | undefined) : Promise<DtoUserApplicationTokens> => {
        let url_ = "/api/user/applicationtokens";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as DtoUserApplicationTokens;
    },

    userRoleApplicationTokens: async(userRoleId: string, abortSignal?: AbortSignal | undefined) : Promise<DtoScPortalUserRoleApplicationTokens> => {
        let url_ = "/api/user/applicationtokens/{userRoleId}";
        if (userRoleId === undefined || userRoleId === null)
            throw new Error("The parameter 'userRoleId' must be defined.");
        url_ = url_.replace("{userRoleId}", encodeURIComponent("" + userRoleId));
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as DtoScPortalUserRoleApplicationTokens;
    },

    userRoleApplicationTokens2: async(userRoleId: string, tokenCode: string, abortSignal?: AbortSignal | undefined) : Promise<DtoScPortalUserRoleApplicationTokens> => {
        let url_ = "/api/user/applicationtokens/{tokenCode}/user/{userRoleId}";
        if (userRoleId === undefined || userRoleId === null)
            throw new Error("The parameter 'userRoleId' must be defined.");
        url_ = url_.replace("{userRoleId}", encodeURIComponent("" + userRoleId));
        if (tokenCode === undefined || tokenCode === null)
            throw new Error("The parameter 'tokenCode' must be defined.");
        url_ = url_.replace("{tokenCode}", encodeURIComponent("" + tokenCode));
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as DtoScPortalUserRoleApplicationTokens;
    },

    changeRfwUserId: async(rfwUserId: string, abortSignal?: AbortSignal | undefined) : Promise<DtoRfwUserDto> => {
        let url_ = "/api/user/set/rfwuserid/{rfwUserId}";
        if (rfwUserId === undefined || rfwUserId === null)
            throw new Error("The parameter 'rfwUserId' must be defined.");
        url_ = url_.replace("{rfwUserId}", encodeURIComponent("" + rfwUserId));
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as DtoRfwUserDto;
    },

}

export const UserApiQueryKeys = createQueryKeys('UserApi', {
    Get: () => [{  }],
    ApplicationTokens: () => [{  }],
    UserRoleApplicationTokens: (userRoleId: string) => [{ userRoleId }],
    UserRoleApplicationTokens2: (userRoleId: string, tokenCode: string) => [{ userRoleId, tokenCode }],
})

export const UserApiQueries = {

    useGet: () => {
        const queryKey = UserApiQueryKeys.Get().queryKey
        return useQuery(queryKey, () => UserApi.get())
    },

    useApplicationTokens: () => {
        const queryKey = UserApiQueryKeys.ApplicationTokens().queryKey
        return useQuery(queryKey, () => UserApi.applicationTokens())
    },

    useUserRoleApplicationTokens: (userRoleId: string) => {
        const queryKey = UserApiQueryKeys.UserRoleApplicationTokens(userRoleId).queryKey
        return useQuery(queryKey, () => UserApi.userRoleApplicationTokens(userRoleId))
    },

    useUserRoleApplicationTokens2: (userRoleId: string, tokenCode: string) => {
        const queryKey = UserApiQueryKeys.UserRoleApplicationTokens2(userRoleId, tokenCode).queryKey
        return useQuery(queryKey, () => UserApi.userRoleApplicationTokens2(userRoleId, tokenCode))
    },

    useChangeRfwUserId: (options?: UseMutationOptions<DtoRfwUserDto, any, string, any>) => {
        return useMutation(
            (rfwUserId: string) => UserApi.changeRfwUserId(rfwUserId),
            options,
        )
    },

}

export const WithdrawalApi = {

    get: async( abortSignal?: AbortSignal | undefined) : Promise<RfwnetWithdrawalEntity[]> => {
        let url_ = "/api/withdrawal";
        url_ = url_.replace(/[?&]$/, "");
        let config_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as RfwnetWithdrawalEntity[];
    },

    create: async(command: SomeExampleOperationCommand, abortSignal?: AbortSignal | undefined) : Promise<SomeExampleOperationCommandResponseThatIsntDbContextModel> => {
        let url_ = "/api/withdrawal";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(command);
        let config_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal: abortSignal
        };

        const { data } = await axiosToUse.request(config_).catch(error => Promise.reject(handleError(error)));
        return data as SomeExampleOperationCommandResponseThatIsntDbContextModel;
    },

}

export const WithdrawalApiQueryKeys = createQueryKeys('WithdrawalApi', {
    Get: () => [{  }],
})

export const WithdrawalApiQueries = {

    useGet: () => {
        const queryKey = WithdrawalApiQueryKeys.Get().queryKey
        return useQuery(queryKey, () => WithdrawalApi.get())
    },

    useCreate: (options?: UseMutationOptions<SomeExampleOperationCommandResponseThatIsntDbContextModel, any, SomeExampleOperationCommand, any>) => {
        return useMutation(
            (command: SomeExampleOperationCommand) => WithdrawalApi.create(command),
            options,
        )
    },

}

export interface GetSchemeDatesForMemberQueryResponse {
    isValid?: boolean;
    validationMessage?: string | undefined;
    validStartDate?: Date;
    schemeName?: string | undefined;
    schemeCode?: string | undefined;
    fundOptionName?: string | undefined;
}

export interface MemberMemberDetail {
    idNumber?: string | undefined;
    idNumberType?: string | undefined;
    homePhone?: string | undefined;
    workPhone?: string | undefined;
    cellPhone?: string | undefined;
    email?: string | undefined;
    preferedCommunicationType?: string | undefined;
    allowSubscriptions?: boolean | undefined;
    requestOrigin?: string | undefined;
    user?: string | undefined;
    homeAddress?: MemberAddress | undefined;
    workAddress?: MemberAddress | undefined;
    postalAddress?: MemberAddress | undefined;
    membershipNumber?: string | undefined;
    title?: string | undefined;
    initials?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender?: string | undefined;
    dateOfBirth?: Date | undefined;
    language?: string | undefined;
    taxNumber?: string | undefined;
    memberCategory?: string | undefined;
    status?: string | undefined;
    countryCode?: string | undefined;
}

export interface MemberAddress {
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    city?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
}

export interface DtoSourceDataModel {
    id?: string;
    businessKey?: string | undefined;
    display?: string | undefined;
    businessKeyType?: string | undefined;
    secure?: boolean;
    schemeCategory?: string | undefined;
}

export interface RetirementSchemeRetirementSchemeEntity {
    retirementSchemeKey?: number;
    dataOriginKey?: number;
    code?: string | undefined;
    name?: string | undefined;
    fundOptionCode?: string | undefined;
    fundOptionName?: string | undefined;
}

export interface RetirementSchemeEmployerBranchKeyEntity {
    name?: string | undefined;
    employerBranchKey?: number;
}

export interface DtoMemberDetails {
    memberKey?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    idNumber?: string | undefined;
    payrollNumber?: string | undefined;
    membershipNumber?: string | undefined;
    title?: string | undefined;
    middleName?: string | undefined;
    gender?: string | undefined;
    paypointKey?: number;
    dateOfBirth?: Date | undefined;
    retirementDate?: Date | undefined;
    plannedRetirementAge?: number | undefined;
    maritalStatus?: string | undefined;
    taxNumber?: string | undefined;
    emailAddress?: string | undefined;
    occupation?: string | undefined;
    age?: number;
    mobilePhone?: string | undefined;
}

export interface UsersIUserAccessor {
    portalUserId?: string | undefined;
    webSealUserGuid?: string | undefined;
    username?: string | undefined;
    fullName?: string | undefined;
    emailAddress?: string | undefined;
    mobilePhone?: string | undefined;
    userRoles?: string[] | undefined;
    rfwUsers?: DtoRfwUserDto[] | undefined;
    currentRfwUser?: DtoRfwUserDto | undefined;
}

export interface DtoRfwUserDto {
    userId?: string;
    userName?: string | undefined;
    role?: string | undefined;
}

export interface DtoUserApplicationTokens {
    user?: DtoScPortalUserModel | undefined;
    applicationTokenValues?: DtoApplicationTokenValue[] | undefined;
}

export interface DtoScPortalUserModel {
    id?: string;
    externalGuid?: string;
    userFullName?: string | undefined;
}

export interface DtoApplicationTokenValue {
    id?: string;
    code?: string | undefined;
    description?: string | undefined;
    tokenValue?: string | undefined;
}

export interface DtoScPortalUserRoleApplicationTokens {
    userRole?: DtoScPortalUserRoleModel | undefined;
    applicationTokenValues?: DtoApplicationTokenValue[] | undefined;
}

export interface DtoScPortalUserRoleModel {
    code?: string | undefined;
    description?: string | undefined;
    user?: DtoScPortalUserModel | undefined;
}

export interface RfwnetWithdrawalEntity {
    userId?: string;
    user?: RfwnetUserEntity | undefined;
    transactionDate?: Date;
    fundOptionId?: number;
    employerBranchId?: number;
    memberNumber?: string | undefined;
    withdrawalIndicator?: string | undefined;
    submitDate?: Date | undefined;
    submitStatus?: boolean;
    memberGroupId?: number;
    categoryId?: number;
    membershipId?: number;
    payrollNumber?: string | undefined;
    title?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    dateOfBirth?: Date | undefined;
    gender?: string | undefined;
    maritalStatus?: string | undefined;
    language?: string | undefined;
    occupation?: string | undefined;
    idNumber?: string | undefined;
    passportNumber?: string | undefined;
    incomeTaxNumber?: string | undefined;
    emailAddress?: string | undefined;
    phonePrimary?: string | undefined;
    homeAddessLine1?: string | undefined;
    homeAddessLine2?: string | undefined;
    homeAddessLine3?: string | undefined;
    homeAddessCity?: string | undefined;
    homeAddressStreetCode?: string | undefined;
    postalAddessLine1?: string | undefined;
    postalAddessLine2?: string | undefined;
    postalAddessLine3?: string | undefined;
    postalAddessCity?: string | undefined;
    postalAddressCode?: string | undefined;
    workflowStatusId?: number | undefined;
    workflowStatus?: RfwnetWorkflowStatusEntity | undefined;
}

export interface RfwnetUserEntity {
    userId?: string;
    userName?: string | undefined;
    lastActivityDate?: Date | undefined;
    membership?: RfwnetMembershipEntity | undefined;
    applicationId?: string;
    application?: RfwnetApplicationEntity | undefined;
    userRoles?: RfwnetUserRoleEntity[] | undefined;
    withdrawals?: RfwnetWithdrawalEntity[] | undefined;
}

export interface RfwnetMembershipEntity {
    userId?: string;
    emailAddress?: string | undefined;
    isActive?: boolean;
    lastLoginDate?: Date | undefined;
    createDate?: Date | undefined;
    user?: RfwnetUserEntity | undefined;
    profileExtend?: RfwnetMemberProfileExtendEntity | undefined;
}

export interface RfwnetMemberProfileExtendEntity {
    userId?: string;
    idNumber?: string | undefined;
    firstname?: string | undefined;
    lastname?: string | undefined;
    mobilePhone?: string | undefined;
    roleType?: string | undefined;
    fundType?: string | undefined;
    allocationTypeIndicator?: string | undefined;
    membership?: RfwnetMembershipEntity | undefined;
}

export interface RfwnetApplicationEntity {
    applicationId?: string;
    name?: string | undefined;
    loweredName?: string | undefined;
    description?: string | undefined;
    users?: RfwnetUserEntity[] | undefined;
}

export interface RfwnetUserRoleEntity {
    userId?: string;
    user?: RfwnetUserEntity | undefined;
    roleId?: string;
    role?: RfwnetRoleEntity | undefined;
}

export interface RfwnetRoleEntity {
    roleId?: string;
    roleName?: string | undefined;
    roleGroup?: string | undefined;
    userRoles?: RfwnetUserRoleEntity[] | undefined;
}

export interface RfwnetWorkflowStatusEntity {
    statusId?: number;
    statusName?: string | undefined;
    statusType?: string | undefined;
    description?: string | undefined;
    tooltip?: string | undefined;
    withdrawals?: RfwnetWithdrawalEntity[] | undefined;
}

export interface SomeExampleOperationCommandResponseThatIsntDbContextModel {
}

export interface SomeExampleOperationCommand {
    someRequiredField: string;
}

export interface ApiError {
    errors: string[] | undefined;
}

function handleValidationError(error: { errors: { [field: string]: string } }): ApiError {
    const errors = Object.keys(error.errors).flatMap(key => error.errors[key])
    return {
        errors
    }
}

function handleError(error: any) {
    if (error.response) {
        if (error.response.status === 400) {
            return handleValidationError(error.response.data);
        }
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.log(error.response.data);
        console.log(error.response.status);
        console.log(error.response.headers);
    } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log(error.request);
    } else {
        // Something happened in setting up the request that triggered an Error
        console.log('Error', error.message);
    }
    console.log(error.config);
    return error
}